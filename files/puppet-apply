#!/usr/bin/env bash
. /etc/profile

#set -xv

# variables
puppetpath="/var/local/enigmasuite/puppet"
webinterface="http://127.0.0.1:8000"
pidfile="/tmp/puppet-apply.pid"
puppet_output="/tmp/puppet_output"
aptfile="/var/lib/apt/.lastrun"



usage() {
cat << EOF
usage: $0 options

This script runs puppet apply, dry run when no options provided

OPTIONS:
   -h      Show this message
   -s      Sleep for n seconds before run
   -r      Run and apply changes (no dry-run)
   -b      Run in background (outputs to $puppet_output)
EOF
}

run() {
    noop=""
    if [[ "$1" == "dry" ]]; then
        noop=1
        echo "** dry run **"
    fi

    background=""
    if [[ "$1" == "background" || "$2" == "background" ]]; then
        background=1
    fi

    apt_update

    echo "running puppet and applying manifest..."
    curl "$webinterface/puppet/site.pp" > "$puppetpath/manifests/site.pp"

    if [[ "$noop" == 1 ]]; then

        if [[ "$background" == 1 ]]; then
            > "$puppet_output"
            puppet_run noop > "$puppet_output" &
        else
            puppet_run noop
        fi

    else

        if [[ "$background" == 1 ]]; then
            > "$puppet_output"
            (puppet_run > "$puppet_output" && inform_webinterface) &
        else
            puppet_run && inform_webinterface &> /dev/null
        fi

    fi

}

inform_webinterface() {
    curl --data "key=config_changed&value=False" -X POST http://127.0.0.1:8000/api/v1/set_option &> /dev/null
}

puppet_run() {
    if [[ "$1" == "noop" ]]; then
        puppet apply --certname box --noop --show_diff --modulepath="$puppetpath/modules" "$puppetpath/manifests/site.pp"
    else
        puppet apply --certname box --show_diff --modulepath="$puppetpath/modules" "$puppetpath/manifests/site.pp"
    fi
}

apt_update() {
    lastrun=$(stat -c "%Y" "$aptfile" 2> /dev/null || echo 0)
    currtime=$(date +%s)

    if [[ $(($currtime - $lastrun)) -gt $((60*60*24)) ]]; then
        echo "running apt-get update"
        apt-get update
        touch "$aptfile"
    fi
}



# Check if this script is already running
kill -0 $(cat "$pidfile" 2> /dev/null) 2> /dev/null
if [[ "$?" == "0" ]]; then
    echo "Script is already running, exiting"
    exit 1
else
    [[ -f "$pidfile" ]] && rm "$pidfile"
fi
echo $$ > "$pidfile"



# Option parsing
while getopts ":rs:b" opt; do
    case "$opt" in
    r)
        run=1
        ;;
    s)
        sleep="$OPTARG"
        ;;
    b)
        background="background"
        ;;
    :)
        echo "Option -$OPTARG requires an argument."
        exit 1
        ;;
    \?)
        usage
        exit 1
        ;;
    esac
done



if [[ -n "$sleep" ]]; then
    echo "sleeping for $sleep seconds..."
    sleep "$sleep"
fi

[[ -z "$run" ]] && run dry $background
[[ -n "$run" ]] && run $background

rm "$pidfile"

