#!/usr/bin/env bash
. /etc/profile

# vars

remoteadresses="<%= puppetmasters.join(' ') %> <% connect_to.each do |c| %><%= c['address'].split(':')[0] %> <% end %>"
orggatewayfile="/tmp/cjdns_org_gw"
internet_interface="eth0"
cjdns_request_tries="/tmp/cjdns_request_tries"
netstat_file="/tmp/netstat"
pidfile="/tmp/setup-cjdns-networking.pid"



# check if its already running
kill -0 $(cat "$pidfile" 2> /dev/null) 2> /dev/null
if [[ "$?" == "0" ]]; then
    echo "script is already running"
    exit 0
fi

echo $$ > "$pidfile"



# detect wifi
if [[ $(ifconfig wlan0 2>/dev/null | wc -l) -gt 0 ]]; then
    internet_interface="wlan0"
fi



# functions

e() {
    echo 1>&2
    echo 1>&2
    echo "$1" 1>&2
}

dhcp() {
    e "dhcp request"
    ifconfig "$internet_interface" up
    killall dhclient 2> /dev/null
    sleep 1
    dhclient "$internet_interface" 2> /dev/null &
    sleep 10
}

sync_time() {
    e "sync time"
    ntpdate pool.ntp.org
}

request_cjdns_internet() {
    try=$(cat "$cjdns_request_tries" 2> /dev/null)
    try=$(($try+1))
    echo "$try" > "$cjdns_request_tries"

    # try another countryserver after the 2nd try
    if [[ "$try" -ge 2 ]]; then
        e "switching to an alternative server"

        for line in $(cat /box/server.json | grep -A10 '"peerings":' | grep '"country":'); do
            ip=$(echo "$line" | sed 's#^"##g' | cut -d: -f1)
            country=$(echo "$line" | tr "," "\n" | grep 'country' | cut -d: -f2 | sed 's#"##g' | sed 's#}##g')

            echo "trying $country ($ip)..."
            if [[ $(ping -c 1 -W 1 $ip | grep 'bytes from' | wc -l) -gt 0 ]]; then
                # take it!
                curl --data "key=selected_country&value=$country" -X POST http://127.0.0.1:8000/api/v1/set_option &> /dev/null
                puppet-apply -r -b
                break
            fi
        done
    fi

    # request cjdns internet via script after the 3rd try
    if [[ "$try" -ge 3 ]]; then
        e "request cjdns internet"
        /usr/local/sbin/request-internet.py 2> /dev/null
    fi
}

start_cjdns() {
    if [[ $(/etc/init.d/cjdns status) != "running" ]]; then
        e "starting cjdns"
        /etc/init.d/cjdns start
    fi
}

restart_cjdns() {
    e "restarting cjdns"
    /etc/init.d/cjdns restart
}

get_vpn_gateway() {
    ifconfig tun0 | grep "inet addr" | cut -d: -f2 | awk '{ print $1 }'
}

get_original_gateway() {
    if [[ -f "$orggatewayfile" ]]; then
        org_gw=$(cat "$orggatewayfile")
    else
        org_gw=$(ip route show | grep ^default | cut -d ' ' -f 3)
        echo "$org_gw" > "$orggatewayfile"
    fi
    echo "$org_gw"
}

gateway_is_up() {
    vpn_gateway=$(get_vpn_gateway)
    if [[ "$vpn_gateway" != "" ]]; then
        echo true
    fi
}

mtu() {
    if [[ $(ifconfig tun0 | grep -i mtu | awk '{ print $6 }' | cut -d: -f 2) -ne 1300 ]]; then
        e "setting mtu"
        ifconfig tun0 mtu 1300
    fi
}

tcpmss() {
    if [[ $(iptables -L -n -v | grep TCPMSS | wc -l) -eq 0 ]]; then
        e "setting tcpmss"
        iptables -A FORWARD -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
    fi
}

original_gateway() {
    original_gateway=$(get_original_gateway)
    for remoteaddress in $remoteadresses; do
        if [[ $(ip route | egrep "$remoteaddress.*?$original_gateway" | wc -l) -eq 0 ]]; then
            e "setting route $remoteaddress via $original_gateway dev $internet_interface"
            ip route add "$remoteaddress" via "$original_gateway" dev "$internet_interface"
        fi
    done
}

defaultroute() {
    original_gateway=$(get_original_gateway)
    vpn_gateway=$(get_vpn_gateway)
    if [[ $(ip route | egrep "default.*?$vpn_gateway" | wc -l) -eq 0 ]]; then
        e "setting defaultroute"
        ip route del default via "$original_gateway" dev "$internet_interface"
        ip route add default via "$vpn_gateway" dev tun0
    fi
}

nat() {
    if [[ $(iptables -t nat -L -n -v | grep POSTROUTING -A10 | grep '0.0.0.0' | wc -l) -eq 0 ]]; then
        e "setting nat"
        iptables -I POSTROUTING -t nat -o tun0 -j MASQUERADE
    fi
}

dns() {
    if [[ $(grep '8.8.8.8' /etc/resolv.conf | wc -l) -eq 0 ]]; then
        dhcp
    fi
}

set_network_parameters() {
    mtu
    tcpmss
    original_gateway
    defaultroute
    nat
    dns
}

set_status() {
    key=$1
    val=$2
    echo "$val" > "$netstat_file-$key"
}



# logic

if [[ $(gateway_is_up) == true ]]; then
    set_network_parameters
    e "checking internet connectivity over cjdns"
    if [[ $(ping -c 1 -W 2 8.8.8.8 | grep 'bytes from') ]]; then
        echo "We have internet. Good."
        set_status "dhcp" 1
        set_status "internet" 1
        set_status "cjdns" 1
        set_status "cjdns_internet" 1
        rm "$cjdns_request_tries" 2> /dev/null
        exit
    fi
fi

echo "No internet via cjdns. Checking for regular internet connection..."
set_status "dhcp" 0
set_status "internet" 0
set_status "cjdns" 0
set_status "cjdns_internet" 0

dhcp

if [[ $(ifconfig eth0 | grep 'inet addr' | wc -l) -gt 0 ]]; then
    set_status "dhcp" 1
fi

# check for internet. if only one server with a direct route is pingable, we have an internet connection
wehaveinternet="no"
for remoteaddress in $remoteadresses; do
    if [[ $(ping -c 1 -W 2 "$remoteaddress" | grep 'bytes from') ]]; then
        echo "internet detected"
        set_status "internet" 1
        wehaveinternet="yes"
        break
    fi
done

if [[ "$wehaveinternet" == "yes" ]]; then
    sync_time
    request_cjdns_internet
    restart_cjdns
    set_status "cjdns" 1
    for i in {1..50}; do
        echo waiting for gateway to come up...
        if [[ $(gateway_is_up) == true ]]; then
            e "gateway is up."
            set_network_parameters
            e "done."
            set_status "cjdns_internet" 1
            exit
        fi
        sleep 1
    done
else
    # we are not connected to the internet.
    # just ensure that cjdns is running, but DO NOT restart it!
    # since local phone calls may be active.
    start_cjdns
    set_status "cjdns" 1
fi

