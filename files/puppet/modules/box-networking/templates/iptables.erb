#!/usr/bin/env bash

# eth0:     internet/router cable
# eth1+2:   internal LAN, phone/pc


iptables="/sbin/iptables"
ip6tables="/sbin/ip6tables"

# reset all
$iptables -F
$iptables -t nat -F
$ip6tables -F

# defaults
$iptables -P INPUT DROP
$iptables -P OUTPUT ACCEPT
$iptables -P FORWARD ACCEPT
$ip6tables -P INPUT DROP
$ip6tables -P OUTPUT ACCEPT
$ip6tables -P FORWARD ACCEPT

# loopback
$iptables -A INPUT -i lo -j ACCEPT

# syncookies
echo 1 > /proc/sys/net/ipv4/tcp_syncookies

# allow ping
$iptables -A INPUT -p icmp -m limit --limit 10/second -j ACCEPT
$iptables -A INPUT -p icmp -j DROP
$ip6tables -A INPUT -p ipv6-icmp -m limit --limit 10/second -j ACCEPT
$ip6tables -A INPUT -p ipv6-icmp -j DROP

# allow related and established
$iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
$ip6tables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

<% if peering_port != '' then %># peering port
$iptables -A INPUT -p udp --dport <%= peering_port %> -j ACCEPT
<% end %>

################################################################################

<% if addresses.class == Array then %># friends<% addresses.each do |address| %>
$ip6tables -A INPUT --src <%= address["ipv6"] %> -j ACCEPT<% end %>
<% end %>

for interface in $(echo "eth1 eth2"); do

    # allow dns requests to tinyproxy
    $iptables -A INPUT -p udp -i "$interface" --sport 1024:65535 --dport 53 -j ACCEPT

    # ssh
    $iptables -A INPUT -p tcp -i "$interface" --dport 22 -j ACCEPT

    # webinterface
    $iptables -A INPUT -p tcp -i "$interface" --dport 80 -j ACCEPT

    # email
    $iptables -A INPUT -p tcp -i "$interface" --dport 25 -j ACCEPT
    $iptables -A INPUT -p tcp -i "$interface" --dport 110 -j ACCEPT
    $iptables -A INPUT -p tcp -i "$interface" --dport 143 -j ACCEPT

    # voip phone
    $iptables -A INPUT -p udp -i "$interface" --dport 5060 -j ACCEPT

    # tinyproxy
    $iptables -A INPUT -p tcp -i "$interface" --dport 8888 -j ACCEPT

    # grandstream phone provisioning
    $iptables -A INPUT -p tcp -i "$interface" --dport 8080 -j ACCEPT

done

################################################################################

# deny broadcasts (no logging)
$iptables -A INPUT -m pkttype --pkt-type broadcast -j DROP
$iptables -A INPUT -m pkttype --pkt-type multicast -j DROP

# log all dropped
$iptables -A INPUT -m limit --limit 10/min -j LOG

